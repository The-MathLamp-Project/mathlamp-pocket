{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>MathLamp stripped down to fit in your pocket</p> <p>mathlamp-pocket is a Python package that includes a full MathLamp interpreter while maintaining a small package size (hence the name). mathlamp-pocket has a single dependency that is lark</p>"},{"location":"#usage","title":"Usage","text":"<pre><code>from mathlamp_pocket.repl import REPL\n\nconsole = REPL()\n\nprint(console.runLine(\"1 + 1\")) # prints 2\n</code></pre>"},{"location":"install/","title":"Installing","text":"<p>Installing <code>mathlamp-pocket</code> is easy as:</p> <pre><code>pip install mathlamp-pocket\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>Let's try running a sinle line in the REPL</p> <pre><code>from mathlamp_pocket.repl import REPL\n\nconsole = REPL()#(1)!\n\nresult = console.run_line(\"1 + 1\")\n\nprint(result)\n</code></pre> <ol> <li>Should be reused to share data (Ex: Variables) between evaluations.</li> </ol>"},{"location":"Reference/lines/","title":"<code>CodeRunner</code> class","text":"<p>Wrapper class for the MathLamp file runner</p> <p>You can import the class from the <code>lines</code> module</p> <pre><code>from mathlamp_pocket.lines import CodeRunner\n</code></pre> Source code in <code>mathlamp_pocket/lines.py</code> <pre><code>class CodeRunner:\n    def run_code_lines(self, code:str) -&gt; list:\n        \"\"\"\n        Runs multiple lines from a multiline string.\n\n        Args:\n            code (str): A multiline string, which each line represents a statement that will be run at the same time by the runner, like a `.lmp` file.\n\n        Returns:\n            list: List of each MathLamp `out[]` prints\n        \"\"\"\n        code_list = code.splitlines()\n        for line in code_list:\n            line_clean = line.rstrip()\n            if not line_clean:\n                continue\n            try:\n                calc(line_clean)\n            except (lark.UnexpectedCharacters, lark.UnexpectedEOF) as e:\n                raise Exception(e)\n        return out_results\n</code></pre>"},{"location":"Reference/lines/#mathlamp_pocket.lines.CodeRunner.run_code_lines","title":"<code>run_code_lines(code)</code>","text":"<p>Runs multiple lines from a multiline string.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>str</code> <p>A multiline string, which each line represents a statement that will be run at the same time by the runner, like a <code>.lmp</code> file.</p> required <p>Returns:</p> Name Type Description <code>list</code> <code>list</code> <p>List of each MathLamp <code>out[]</code> prints</p> Source code in <code>mathlamp_pocket/lines.py</code> <pre><code>def run_code_lines(self, code:str) -&gt; list:\n    \"\"\"\n    Runs multiple lines from a multiline string.\n\n    Args:\n        code (str): A multiline string, which each line represents a statement that will be run at the same time by the runner, like a `.lmp` file.\n\n    Returns:\n        list: List of each MathLamp `out[]` prints\n    \"\"\"\n    code_list = code.splitlines()\n    for line in code_list:\n        line_clean = line.rstrip()\n        if not line_clean:\n            continue\n        try:\n            calc(line_clean)\n        except (lark.UnexpectedCharacters, lark.UnexpectedEOF) as e:\n            raise Exception(e)\n    return out_results\n</code></pre>"},{"location":"Reference/repl/","title":"<code>REPL</code> class","text":"<p>Wrapper class for the MathLamp REPL</p> <p>You can import the <code>REPL</code> class from the <code>repl</code> module</p> <pre><code>from mathlamp_pocket.repl import REPL\n</code></pre> Source code in <code>mathlamp_pocket/repl.py</code> <pre><code>class REPL:\n    def run_line(self,code:str) -&gt; str:\n        \"\"\"\n        Runs a line in REPL.\n\n        Args:\n            code (str): The code to be executed.\n\n        Returns:\n            The output of the REPL. if `code` it doesn't output, (Ex: Variable assignments) an empty string will be returned instead\n        \"\"\"\n        try:\n            return calc(code)\n        except (lark.UnexpectedCharacters, lark.UnexpectedEOF) as e:\n            raise Exception(e)\n\n    def run_code_lines(self,code:str) -&gt; list:\n        \"\"\"\n        Runs multiple lines from a multiline string\n\n        Args:\n            code (str): A multiline string, which each line represents a statement that will be run individually in the REPL, same as running `run_line()` for each line\n\n        Returns:\n            list: List of each statement's output, if a statement doesn't output, (Ex: Variable assignments) they will be missing in the list\n        \"\"\"\n        output = []\n        code_list = code.splitlines()\n        for line in code_list:\n            line_clean = line.rstrip()\n            if not line_clean:\n                continue\n            try:\n                output.append(calc(line_clean))\n            except (lark.UnexpectedCharacters, lark.UnexpectedEOF) as e:\n                raise Exception(e)\n        return output\n</code></pre>"},{"location":"Reference/repl/#mathlamp_pocket.repl.REPL.run_code_lines","title":"<code>run_code_lines(code)</code>","text":"<p>Runs multiple lines from a multiline string</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>str</code> <p>A multiline string, which each line represents a statement that will be run individually in the REPL, same as running <code>run_line()</code> for each line</p> required <p>Returns:</p> Name Type Description <code>list</code> <code>list</code> <p>List of each statement's output, if a statement doesn't output, (Ex: Variable assignments) they will be missing in the list</p> Source code in <code>mathlamp_pocket/repl.py</code> <pre><code>def run_code_lines(self,code:str) -&gt; list:\n    \"\"\"\n    Runs multiple lines from a multiline string\n\n    Args:\n        code (str): A multiline string, which each line represents a statement that will be run individually in the REPL, same as running `run_line()` for each line\n\n    Returns:\n        list: List of each statement's output, if a statement doesn't output, (Ex: Variable assignments) they will be missing in the list\n    \"\"\"\n    output = []\n    code_list = code.splitlines()\n    for line in code_list:\n        line_clean = line.rstrip()\n        if not line_clean:\n            continue\n        try:\n            output.append(calc(line_clean))\n        except (lark.UnexpectedCharacters, lark.UnexpectedEOF) as e:\n            raise Exception(e)\n    return output\n</code></pre>"},{"location":"Reference/repl/#mathlamp_pocket.repl.REPL.run_line","title":"<code>run_line(code)</code>","text":"<p>Runs a line in REPL.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>str</code> <p>The code to be executed.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The output of the REPL. if <code>code</code> it doesn't output, (Ex: Variable assignments) an empty string will be returned instead</p> Source code in <code>mathlamp_pocket/repl.py</code> <pre><code>def run_line(self,code:str) -&gt; str:\n    \"\"\"\n    Runs a line in REPL.\n\n    Args:\n        code (str): The code to be executed.\n\n    Returns:\n        The output of the REPL. if `code` it doesn't output, (Ex: Variable assignments) an empty string will be returned instead\n    \"\"\"\n    try:\n        return calc(code)\n    except (lark.UnexpectedCharacters, lark.UnexpectedEOF) as e:\n        raise Exception(e)\n</code></pre>"}]}